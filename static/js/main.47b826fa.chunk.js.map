{"version":3,"sources":["components/TodoList/TodoList.jsx","api/request.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","state","filterByTitleCondition","filterByStatusCondition","onChange","event","target","name","value","setState","this","props","todos","selectedUserId","onClick","isLoading","className","type","color","height","width","preparedTodos","filter","todo","title","toLowerCase","includes","completed","length","map","classNames","key","id","defaultChecked","userId","React","PureComponent","defaultProps","PropTypes","arrayOf","shape","request","url","fetch","then","response","json","serverResponse","data","CurrentUser","user","getUser","prevProps","email","phone","App","selectUserId","onClear","finally","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.47b826fa.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport Loader from 'react-loader-spinner';\n\nexport class TodoList extends React.PureComponent {\n  state = {\n    filterByTitleCondition: '',\n    filterByStatusCondition: 'all',\n  }\n\n  onChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  render() {\n    const {\n      todos,\n      selectedUserId,\n      onClick,\n      isLoading,\n    } = this.props;\n\n    if (isLoading) {\n      return (\n        <div className=\"loading\">\n          <Loader\n            type=\"Puff\"\n            color=\"#00BFFF\"\n            height={100}\n            width={100}\n          />\n        </div>\n      );\n    }\n\n    const {\n      filterByTitleCondition,\n      filterByStatusCondition,\n    } = this.state;\n\n    const preparedTodos = todos\n      .filter((todo) => {\n        const title = todo.title.toLowerCase();\n\n        return (title.includes(filterByTitleCondition));\n      })\n      .filter((todo) => {\n        switch (filterByStatusCondition) {\n          case 'active':\n            return !todo.completed;\n          case 'completed':\n            return todo.completed;\n          case 'all':\n          default:\n            return true;\n        }\n      });\n\n    return (\n      <div className=\"TodoList\">\n        <h2>\n          {`Todos: ${preparedTodos.length}`}\n        </h2>\n        <div className=\"search-form\">\n          <label>\n            Filter by title:&nbsp;\n            <input\n              type=\"text\"\n              name=\"filterByTitleCondition\"\n              className=\"search-form__search-title\"\n              onChange={this.onChange}\n              value={filterByTitleCondition}\n            />\n          </label>\n          <label>\n            Show:&nbsp;\n            <select\n              name=\"filterByStatusCondition\"\n              onChange={this.onChange}\n            >\n              <option value=\"all\">All</option>\n              <option value=\"active\">Not completed</option>\n              <option value=\"completed\">Completed</option>\n            </select>\n          </label>\n        </div>\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {preparedTodos.map(todo => (\n              <li\n                className={classNames(\n                  'TodoList__item',\n                  {\n                    'TodoList__item--unchecked': !todo.completed,\n                    'TodoList__item--checked': todo.completed,\n                  },\n                )}\n                key={todo.id}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    defaultChecked={todo.completed}\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={classNames(\n                    'TodoList__user-button button',\n                    {\n                      'TodoList__user-button--selected':\n                        todo.userId === selectedUserId,\n                    },\n                  )}\n                  type=\"button\"\n                  onClick={() => onClick(todo.userId)}\n                >\n                  User&nbsp;\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n\nTodoList.defaultProps = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      completed: false,\n    }),\n  ),\n\n};\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      userId: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      completed: PropTypes.bool,\n      createdAt: PropTypes.string.isRequired,\n      updatedAt: PropTypes.string.isRequired,\n    }),\n  ),\n  selectedUserId: PropTypes.number.isRequired,\n  onClick: PropTypes.func.isRequired,\n  isLoading: PropTypes.bool.isRequired,\n};\n","const BASE_URL = `https://mate-api.herokuapp.com`;\n\nconst request = url => (fetch(`${BASE_URL}/${url}`)\n  .then(response => response.json())\n  .then(serverResponse => serverResponse.data || serverResponse));\n\nexport const getTodos = () => (\n  request('todos')\n    .then(todos => todos.filter(\n      todo => (todo.title && todo.userId),\n    ))\n);\n\nexport const getUserById = userId => request(`users/${userId}`);\n","import React from 'react';\nimport './CurrentUser.scss';\nimport PropTypes from 'prop-types';\nimport Loader from 'react-loader-spinner';\nimport { getUserById } from '../../api/request';\n\nexport class CurrentUser extends React.PureComponent {\n  state = {\n    user: {},\n    isLoading: false,\n  }\n\n  componentDidMount() {\n    this.getUser();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.userId !== this.props.userId) {\n      this.getUser();\n    }\n  }\n\n  getUser() {\n    this.setState({ isLoading: true });\n\n    const selectedUserId = this.props.userId;\n\n    getUserById(selectedUserId)\n      .then(user => this.setState({ user }))\n      .then(() => this.setState({ isLoading: false }));\n  }\n\n  render() {\n    const { user, isLoading } = this.state;\n\n    if (isLoading) {\n      return (\n        <div className=\"loading\">\n          <Loader\n            type=\"Puff\"\n            color=\"#00BFFF\"\n            height={100}\n            width={100}\n          />\n        </div>\n      );\n    }\n\n    const { onClick } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            {`Selected user: ${user.id}`}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">\n          {user.name}\n        </h3>\n        <p className=\"CurrentUser__email\">\n          {user.email}\n        </p>\n        <p className=\"CurrentUser__phone\">\n          {user.phone}\n        </p>\n        <button\n          type=\"button\"\n          className=\"CurrentUser__clear button\"\n          onClick={onClick}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  onClick: PropTypes.func.isRequired,\n  userId: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api/request';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    isLoading: false,\n  };\n\n  componentDidMount() {\n    this.setState({ isLoading: true });\n\n    getTodos()\n      .then(todos => this.setState({ todos }))\n      .finally(() => this.setState({ isLoading: false }));\n  }\n\n  selectUserId = (userId) => {\n    this.setState({ selectedUserId: userId });\n  }\n\n  onClear = () => {\n    this.setState({ selectedUserId: 0 });\n  }\n\n  render() {\n    const {\n      todos,\n      selectedUserId,\n      isLoading,\n    } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={todos}\n            selectedUserId={selectedUserId}\n            onClick={this.selectUserId}\n            isLoading={isLoading}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                onClick={this.onClear}\n                userId={selectedUserId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}